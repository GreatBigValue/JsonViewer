services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: json-viewer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: always
    networks:
      - json-viewer-network
    env_file:
      - ./nginx/.env
  postgres:
    image: postgres:17.4
    container_name: json-viewer-postgres
    environment:
      POSTGRES_USER: jsonviewer
      POSTGRES_PASSWORD: password
      POSTGRES_DB: jsonviewer
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5555:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jsonviewer -d jsonviewer"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - json-viewer-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: json-viewer-backend
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./backend/.env
    environment:
      PORT: 3001
    # Only expose to internal network, not to host directly
    # ports:
    #   - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - json-viewer-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: json-viewer-frontend
    depends_on:
      - backend
    # Only expose to internal network, not to host directly
    # ports:
    #   - "3000:3000"
    env_file:
      - ./frontend/.env
    volumes:
      - ./frontend:/app
      - /app/node_modules
    # Use nodemon to watch for changes and restart the server
    command: sh -c "bun install && bun run dev"
    environment:
      - NODE_ENV=development
    networks:
      - json-viewer-network

volumes:
  postgres_data:

networks:
  json-viewer-network:
    driver: bridge
