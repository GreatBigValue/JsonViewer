# Main HTTPS server configuration
server {
    listen 443 ssl;
    listen [::]:443 ssl;

    # Get server name from environment variable
    server_name ${SERVER_NAME} localhost;

    # Use Docker's DNS resolver
    resolver 127.0.0.11 valid=30s;

    # SSL configuration
    ssl_certificate /etc/nginx/ssl/${SSL_CERT_FILE};
    ssl_certificate_key /etc/nginx/ssl/${SSL_KEY_FILE};

    # SSL settings (secure defaults)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # HSTS (uncomment for production)
    # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # Proxy frontend requests
    location / {
        # Use variables for dynamic resolution of hostnames
        set $frontend_upstream "frontend:3000";

        proxy_pass http://$frontend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Don't fail if upstream is not available immediately
        proxy_connect_timeout 5s;
        proxy_read_timeout 60s;
        proxy_send_timeout 60s;
        proxy_next_upstream error timeout http_502 http_503 http_504;
    }

    # Proxy API requests to the backend
    location /api {
        # Use variables for dynamic resolution of hostnames
        set $backend_upstream "backend:3001";

        # Remove /api prefix when forwarding to backend
        rewrite ^/api(/.*)$ $1 break;

        proxy_pass http://$backend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Don't fail if upstream is not available immediately
        proxy_connect_timeout 5s;
        proxy_read_timeout 60s;
        proxy_send_timeout 60s;
        proxy_next_upstream error timeout http_502 http_503 http_504;
    }

    # Error logs
    error_log /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
}
